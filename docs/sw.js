const CONFIG={BASE_URL:"https://story-api.dicoding.dev/v1",DEFAULT_LANGUAGE:"en-us",CACHE_NAME:"StoryApp-V1"},CACHE_NAME=CONFIG.CACHE_NAME,STATIC_CACHE=`${CACHE_NAME}-static`,DYNAMIC_CACHE=`${CACHE_NAME}-dynamic`,IMAGE_CACHE=`${CACHE_NAME}-images`,STATIC_RESOURCES=["/","/index.html","/app.bundle.js","/manifest.json","/offline.html","https://unpkg.com/leaflet@1.9.4/dist/leaflet.css","https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css","https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap","https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"];async function cacheFirst(e,t){const n=await caches.open(t),i=await n.match(e);if(i)return i;try{const t=await fetch(e);return t.ok&&n.put(e,t.clone()),t}catch(e){throw console.error("Cache First failed:",e),e}}async function cacheFirstWithFallback(e,t){const n=await caches.open(t),i=await n.match(e);if(i)return i;try{const t=await fetch(e);return t.ok&&n.put(e,t.clone()),t}catch(e){return new Response('<svg width="200" height="150" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="#f0f0f0"/><text x="50%" y="50%" text-anchor="middle" dy=".3em" fill="#999">Image unavailable</text></svg>',{headers:{"Content-Type":"image/svg+xml"}})}}async function networkFirstWithOfflineFallback(e){const t=await caches.open(DYNAMIC_CACHE);try{const n=await fetch(e);return n.ok&&t.put(e,n.clone()),n}catch(n){return await t.match(e)||new Response(JSON.stringify({error:!0,message:"You are offline. Please check your internet connection.",offline:!0}),{status:503,headers:{"Content-Type":"application/json"}})}}async function navigationHandler(e){try{return await fetch(e)}catch(e){const t=await caches.open(STATIC_CACHE);return await t.match("/offline.html")||new Response("Offline",{status:503})}}async function staleWhileRevalidate(e,t){const n=await caches.open(t),i=await n.match(e),a=fetch(e).then((t=>(t.ok&&n.put(e,t.clone()),t)));return i||a}function isStaticResource(e){return STATIC_RESOURCES.some((t=>e.url.includes(t)))||e.url.includes(".css")||e.url.includes(".js")||e.url.includes(".woff")||e.url.includes(".woff2")}function isImageRequest(e){return"image"===e.destination||/\.(jpg|jpeg|png|gif|webp|svg)$/i.test(e.url)}function isAPIRequest(e){return e.url.includes("story-api.dicoding.dev")}function isNavigationRequest(e){return"navigate"===e.mode}async function handleBackgroundSync(){try{(await self.clients.matchAll()).forEach((e=>{e.postMessage({type:"BACKGROUND_SYNC",message:"Background sync triggered"})}))}catch(e){console.error("Background sync failed:",e)}}self.addEventListener("install",(e=>{console.log("Service Worker: Installing..."),e.waitUntil(caches.open(STATIC_CACHE).then((e=>(console.log("Service Worker: Precaching static resources"),e.addAll(STATIC_RESOURCES)))).then((()=>(console.log("Service Worker: Static resources cached successfully"),self.skipWaiting()))).catch((e=>{console.error("Service Worker: Failed to cache static resources",e)})))})),self.addEventListener("activate",(e=>{console.log("Service Worker: Activating..."),e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if(e!==STATIC_CACHE&&e!==DYNAMIC_CACHE&&e!==IMAGE_CACHE)return console.log("Service Worker: Deleting old cache",e),caches.delete(e)}))))).then((()=>(console.log("Service Worker: Activated successfully"),self.clients.claim()))))})),self.addEventListener("fetch",(e=>{const{request:t}=e;new URL(t.url),"GET"===t.method&&t.url.startsWith("http")&&(isStaticResource(t)?e.respondWith(cacheFirst(t,STATIC_CACHE)):isImageRequest(t)?e.respondWith(cacheFirstWithFallback(t,IMAGE_CACHE)):isAPIRequest(t)?e.respondWith(networkFirstWithOfflineFallback(t)):isNavigationRequest(t)?e.respondWith(navigationHandler(t)):e.respondWith(staleWhileRevalidate(t,DYNAMIC_CACHE)))})),self.addEventListener("push",(e=>{console.log("Service Worker: Push event received",e);let t={title:"Rifaildy's StoryShare",body:"You have a new notification",icon:"/icons/icon-192x192.png",badge:"/icons/icon-72x72.png",tag:"storyshare-notification",data:{url:"/"}};if(e.data)try{const n=e.data.json();t={...t,...n}}catch(n){console.error("Error parsing push data:",n),t.body=e.data.text()||t.body}const n=self.registration.showNotification(t.title,{body:t.body,icon:t.icon,badge:t.badge,tag:t.tag,data:t.data,actions:[{action:"open",title:"Open App",icon:"/icons/icon-72x72.png"},{action:"close",title:"Close",icon:"/icons/icon-72x72.png"}],requireInteraction:!1,silent:!1});e.waitUntil(n)})),self.addEventListener("notificationclick",(e=>{if(console.log("Service Worker: Notification clicked",e),e.notification.close(),"close"===e.action)return;const t=e.notification.data?.url||"/",n=clients.matchAll({type:"window",includeUncontrolled:!0}).then((e=>{for(let n=0;n<e.length;n++){const i=e[n];if(i.url.includes(t)&&"focus"in i)return i.focus()}if(clients.openWindow)return clients.openWindow(t)}));e.waitUntil(n)})),self.addEventListener("sync",(e=>{console.log("Service Worker: Background sync",e),"background-sync"===e.tag&&e.waitUntil(handleBackgroundSync())})),self.addEventListener("message",(e=>{console.log("Service Worker: Message received",e.data),e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting(),e.data&&"CACHE_URLS"===e.data.type&&e.waitUntil(caches.open(DYNAMIC_CACHE).then((t=>t.addAll(e.data.urls)))),e.ports&&e.ports[0]&&e.ports[0].postMessage({type:"SW_RESPONSE",message:"Message received by service worker"})}));